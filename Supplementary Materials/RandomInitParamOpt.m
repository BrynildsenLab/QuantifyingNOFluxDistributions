function [fitValMat,resNorms,exitFlags,randMat,randSeedVal] = ...
    RandomInitParamOpt(model,expX,expY,fitParams,paramBounds,n,fitSpecies,variance,normFlag,randSeedVal)
%RANDOMINITPARAMOPT Fit model to data using randomized initial parameters.
% 
%--------------------------------- INPUTS ---------------------------------
%
% model        model structure generated by LoadEcoliNOmodel function.
%
%              NOTE: multiple models can be input if fitting more than one
%              condition. In this case, model is input as a structure of
%              multiple models (e.g., model = [ model1 , model2 ]; )
%
% expX         experimental X-values (e.g., time points).
%
%              NOTE: if multiple Y-values are to be used, either a single
%              X-value column could be used, or an X-value column for each
%              Y-value column can be used.
%
% expY         experimental Y-values (e.g., concentrations). 
%
%              NOTE: multiple columns of Y-values can be included, if 
%                    fitting the concentrations of more than one species, 
%                    and/or more than one condition.
%
%              EXAMPLE FORMAT (2 conditions, 2 species):
%
%                        model 1      model 1      model 2      model 2
%                       species A    species B    species A    species B 
%              expY = [     #      ,     #      ,     #      ,     #    
%                           #      ,     #      ,     #      ,     #     
%                           #      ,     #      ,     #      ,     #     ];
%
% fitParams    list of parameters that will be varied to fit the model
%              simulation to the experimental data
%
% paramBounds  P x 2 matrix with the min and max allowed parameter values
%              for each parameter in FITPARAMS, where P = # of parameters
%
% n            number of optimizations (fits) that will be run
%
% fitSpecies   model species name (or names) corresponding to the
%              experimental data being fit. 
%
%              EXAMPLE:
%                  If the O2 concentration is being fit, then
%                  fitSpecies = 'o2'.
%
%                  If both O2 and NO concentrations are being fit, then
%                  fitSpecies = {'o2','no'}. NOTE: order must be consistent
%                  with the ordering of the data in the expY matrix.
%
% variance     (OPTIONAL) variance associated with experimental Y-data. The
%              optimization will normalize the Y-data by the variance, such
%              that data points with less variance will be more heavily
%              weighted.
%
% normFlag     (DEFAULT = FALSE) each dataset (column) in expY will be
%              normalized by the mean of that dataset, to help eliminate
%              weighting bias toward datasets with higher absolute values.
%
% randSeedVal  (OPTIONAL) manually seed the random number generator. 
%              If not specified, a seed will automatically be generated
%              based on CLOCK.
%
%--------------------------------- OUTPUTS --------------------------------
%
% fitValMat    N x P matrix of optimized parameter values, where N = number
%              of optimizations, and P = number of optimized parameters.
%
% resNorms     the residual norm (sum of the squared residuals; SSR) for
%              each optimization.
%
% exitFlags    number that describes the exit condition of LSQCURVEFIT
%              (see LSQCURVEFIT function for meaning of numbers) for each
%              optimization.
%
% randMat      N x P matrix of the randomly-selected initial parameter
%              values for each optimization. Values range from 0 to 1,
%              representing the fraction of the paramBounds. 
%
%              EXAMPLES:
%              if the value is 0, then the parameter value = lower bound.
%              If the value is 1, then the parameter value = upper bound.
%              If the value is 0.5, then the parameter value is halfway
%              between the lower and upper bounds.
%
% randSeedVal  the number used to seed the random number generator.
%
% Copyright 2016 Jonathan L. Robinson



% handle optional inputs
if nargin < 10
    randSeedVal = [];
    if nargin < 9
        normFlag = false;
        if nargin < 8
            variance = [];
        end
    end
end

% unpack model data
[species,paramNames] = deal(model(1).species, model(1).paramNames);
for i = 1:numel(model)
    Xi(:,i) = model(i).Xi;
    P(:,i) = model(i).P;
end

Nspecs = length(species);
Nparams = length(fitParams);

XP_list = [species;paramNames];

if isempty(randSeedVal)
    randSeedVal = sum(100*clock);
end
s = RandStream('mt19937ar','Seed', randSeedVal);
RandStream.setGlobalStream(s);
reset(s, randSeedVal);


randMat = rand(n,Nparams);
fitValMat = [];

parfor i = 1:n  % PARFOR HERE
    
    XP = [Xi;P];

    fitVals = paramBounds(:,1) + randMat(i,:)' .* range(paramBounds,2);
    
    for j = 1:length(fitParams)
        if strcmp(fitParams{j},'dna')
            ind = find(strcmp('ds_dad_2',XP_list) | strcmp('ds_dgsn',XP_list) | strcmp('ds_dcyt',XP_list));
        else
            ind = find(strcmp(fitParams{j},XP_list));
        end
        XP(ind,:) = fitVals(j);
    end
    
    modelTemp = model;
    for j = 1:numel(model)
        modelTemp(j).Xi = XP(1:Nspecs,j);
        modelTemp(j).P = XP(Nspecs+1:end,j);
    end
    
    [fitVals,resNorm,exitFlag] = FitModelParams(modelTemp,expX,expY,fitParams,paramBounds,fitSpecies,variance,normFlag);
    
    fitValMat(i,:) = fitVals;
    resNorms(i,1) = resNorm;
    exitFlags(i,1) = exitFlag;
    
    fprintf('Iteration: %u, SSR: %3.2f.\n',i,resNorm);
    
end



